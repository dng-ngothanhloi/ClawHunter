import express from 'express';
import { param } from 'express-validator';
import { asyncHandler, validationMiddleware } from '../middleware/index.js';
import { db } from '../config/database.js';
import logger from '../config/logger.js';

const router: any = express.Router();

/**
 * GET /metadata/owner/{tokenId}
 * NFTOwner ERC-1155 token metadata
 * Returns fractional ownership token metadata
 */
router.get('/owner/:tokenId',
  [
    param('tokenId')
      .matches(/^\d+$/)
      .withMessage('Token ID must be a valid number'),
  ],
  validationMiddleware,
  asyncHandler(async (req: express.Request, res: express.Response) => {
    const tokenId = req.params.tokenId;
    
    logger.debug(`Fetching NFTOwner metadata for token ${tokenId}`);

    // Get machine information from token ID
    // In the NFTOwner contract, tokenId maps to machineId
    const machineId = BigInt(tokenId);
    
    // Get machine revenue data
    const [machineStats, latestRevenue] = await Promise.all([
      db.machineRevenue.aggregate({
        where: { machineId },
        _sum: { Rm: true },
        _avg: { Rm: true },
        _count: true,
      }),
      db.machineRevenue.findFirst({
        where: { machineId },
        orderBy: { epochId: 'desc' },
        include: {
          epoch: {
            select: {
              blockTime: true,
              epochId: true,
            },
          },
        },
      }),
    ]);

    // Calculate rarity based on revenue performance
    const totalRevenue = Number(machineStats._sum.Rm || 0);
    const averageRevenue = Number(machineStats._avg.Rm || 0);
    const rarity = calculateRarity(totalRevenue, averageRevenue);

    const metadata = {
      name: `Claw Machine #${tokenId} Ownership`,
      description: `Fractional ownership token for Claw Machine #${tokenId}. This ERC-1155 token represents a share in the revenue generated by this claw machine.`,
      image: `https://api.clawhunters.com/images/machines/${tokenId}.png`,
      external_url: `https://app.clawhunters.com/machines/${tokenId}`,
      attributes: [
        {
          trait_type: "Machine ID",
          value: tokenId
        },
        {
          trait_type: "Token Type",
          value: "Fractional Ownership"
        },
        {
          trait_type: "Rarity",
          value: rarity
        },
        {
          trait_type: "Total Revenue",
          value: totalRevenue.toFixed(6)
        },
        {
          trait_type: "Average Revenue",
          value: averageRevenue.toFixed(6)
        },
        {
          trait_type: "Active Epochs",
          value: machineStats._count
        },
        {
          trait_type: "Last Activity",
          value: latestRevenue?.epoch?.blockTime.toISOString() || "Unknown"
        }
      ],
      properties: {
        machine_id: tokenId,
        token_standard: "ERC-1155",
        ownership_type: "fractional",
        revenue_sharing: true
      }
    };

    logger.info(`Generated NFTOwner metadata for token ${tokenId}`);
    res.json(metadata);
  })
);

/**
 * GET /metadata/claw/{tokenId}
 * NFTClaw ERC-721 token metadata
 * Returns claw machine NFT metadata
 */
router.get('/claw/:tokenId',
  [
    param('tokenId')
      .matches(/^\d+$/)
      .withMessage('Token ID must be a valid number'),
  ],
  validationMiddleware,
  asyncHandler(async (req: express.Request, res: express.Response) => {
    const tokenId = req.params.tokenId;
    
    logger.debug(`Fetching NFTClaw metadata for token ${tokenId}`);

    // Get machine information
    const machineId = BigInt(tokenId);
    
    const [machineStats, latestRevenue, firstRevenue] = await Promise.all([
      db.machineRevenue.aggregate({
        where: { machineId },
        _sum: { Rm: true },
        _avg: { Rm: true },
        _count: true,
      }),
      db.machineRevenue.findFirst({
        where: { machineId },
        orderBy: { epochId: 'desc' },
        include: {
          epoch: {
            select: {
              blockTime: true,
              epochId: true,
            },
          },
        },
      }),
      db.machineRevenue.findFirst({
        where: { machineId },
        orderBy: { epochId: 'asc' },
        include: {
          epoch: {
            select: {
              blockTime: true,
              epochId: true,
            },
          },
        },
      }),
    ]);

    const totalRevenue = Number(machineStats._sum.Rm || 0);
    const averageRevenue = Number(machineStats._avg.Rm || 0);
    const rarity = calculateRarity(totalRevenue, averageRevenue);
    const location = generateLocation(tokenId);
    const mode = generateMode(tokenId);

    const metadata = {
      name: `Claw Machine #${tokenId}`,
      description: `A unique claw machine in the Claw Hunters GameFi ecosystem. This NFT represents ownership of a revenue-generating claw machine that participates in the decentralized revenue sharing system.`,
      image: `https://api.clawhunters.com/images/claw-machines/${tokenId}.png`,
      external_url: `https://app.clawhunters.com/machines/${tokenId}`,
      attributes: [
        {
          trait_type: "Machine ID",
          value: parseInt(tokenId)
        },
        {
          trait_type: "Rarity",
          value: rarity
        },
        {
          trait_type: "Location",
          value: location
        },
        {
          trait_type: "Mode",
          value: mode
        },
        {
          trait_type: "Total Revenue",
          value: totalRevenue.toFixed(6)
        },
        {
          trait_type: "Average Revenue",
          value: averageRevenue.toFixed(6)
        },
        {
          trait_type: "Active Epochs",
          value: machineStats._count
        },
        {
          trait_type: "First Activity",
          value: firstRevenue?.epoch?.blockTime.toISOString() || "Unknown"
        },
        {
          trait_type: "Last Activity",
          value: latestRevenue?.epoch?.blockTime.toISOString() || "Unknown"
        }
      ],
      properties: {
        machine_id: tokenId,
        token_standard: "ERC-721",
        ownership_type: "full",
        revenue_sharing: true,
        gamefi_asset: true
      }
    };

    logger.info(`Generated NFTClaw metadata for token ${tokenId}`);
    res.json(metadata);
  })
);

/**
 * GET /metadata/ticket/{tokenId}
 * NFTTicket ERC-721 token metadata
 * Returns game ticket NFT metadata
 */
router.get('/ticket/:tokenId',
  [
    param('tokenId')
      .matches(/^\d+$/)
      .withMessage('Token ID must be a valid number'),
  ],
  validationMiddleware,
  asyncHandler(async (req: express.Request, res: express.Response) => {
    const tokenId = req.params.tokenId;
    
    logger.debug(`Fetching NFTTicket metadata for token ${tokenId}`);

    // Generate ticket attributes based on token ID
    const ticketType = generateTicketType(tokenId);
    const rarity = generateTicketRarity(tokenId);
    const gameMode = generateGameMode(tokenId);

    const metadata = {
      name: `${ticketType} Ticket #${tokenId}`,
      description: `A gaming ticket for the Claw Hunters GameFi platform. This NFT ticket can be used to participate in claw machine games and earn rewards.`,
      image: `https://api.clawhunters.com/images/tickets/${ticketType.toLowerCase()}-${tokenId}.png`,
      external_url: `https://app.clawhunters.com/tickets/${tokenId}`,
      attributes: [
        {
          trait_type: "Ticket ID",
          value: parseInt(tokenId)
        },
        {
          trait_type: "Ticket Type",
          value: ticketType
        },
        {
          trait_type: "Rarity",
          value: rarity
        },
        {
          trait_type: "Game Mode",
          value: gameMode
        },
        {
          trait_type: "Usable",
          value: "Yes"
        },
        {
          trait_type: "Transferable",
          value: "Yes"
        }
      ],
      properties: {
        ticket_id: tokenId,
        token_standard: "ERC-721",
        ticket_type: ticketType.toLowerCase(),
        gamefi_ticket: true,
        usable: true
      }
    };

    logger.info(`Generated NFTTicket metadata for token ${tokenId}`);
    res.json(metadata);
  })
);

/**
 * Helper function to calculate machine rarity based on revenue performance
 */
function calculateRarity(totalRevenue: number, averageRevenue: number): string {
  const score = (totalRevenue + averageRevenue) / 2;
  
  if (score >= 100000) return "Legendary";
  if (score >= 75000) return "Epic";
  if (score >= 50000) return "Rare";
  if (score >= 25000) return "Uncommon";
  return "Common";
}

/**
 * Helper function to generate machine location
 */
function generateLocation(tokenId: string): string {
  const locations = [
    "Arcade Center", "Shopping Mall", "Entertainment District", 
    "Gaming Hub", "Theme Park", "Casino Floor", "Retail Store",
    "Airport Terminal", "Train Station", "Beach Resort"
  ];
  const index = parseInt(tokenId) % locations.length;
  return locations[index];
}

/**
 * Helper function to generate machine mode
 */
function generateMode(tokenId: string): string {
  const modes = [
    "Classic", "Speed", "Precision", "Power", "Lucky", 
    "Skill", "Timed", "Multi-Ball", "Bonus", "Turbo"
  ];
  const index = parseInt(tokenId) % modes.length;
  return modes[index];
}

/**
 * Helper function to generate ticket type
 */
function generateTicketType(tokenId: string): string {
  const types = [
    "Standard", "Premium", "VIP", "Golden", "Diamond",
    "Silver", "Bronze", "Platinum", "Elite", "Master"
  ];
  const index = parseInt(tokenId) % types.length;
  return types[index];
}

/**
 * Helper function to generate ticket rarity
 */
function generateTicketRarity(tokenId: string): string {
  const rarities = ["Common", "Uncommon", "Rare", "Epic", "Legendary"];
  const index = parseInt(tokenId) % rarities.length;
  return rarities[index];
}

/**
 * Helper function to generate game mode
 */
function generateGameMode(tokenId: string): string {
  const modes = [
    "Classic Claw", "Speed Challenge", "Precision Test", "Lucky Draw",
    "Skill Master", "Time Attack", "Multi-Ball", "Bonus Round"
  ];
  const index = parseInt(tokenId) % modes.length;
  return modes[index];
}

export default router;
